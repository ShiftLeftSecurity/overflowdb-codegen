package overflowdb.schemagenerator

import overflowdb.BatchedUpdate._
import overflowdb.DetachedNodeGeneric

import java.lang.System.lineSeparator
import scala.collection.mutable

/**
  * Create a base schema definition from a DiffGraph, as e.g. generated by overflowdb.formats.GraphMLImporter
  * This will give you a baseline for creating an overflowdb schema, so you can generate domain types etc.
  *
  * You will need to fill in some gaps later, e.g.
  * - properties: cardinalities, potentially reuse across different nodes/edges, comments
  * - relationships: cardinalities, comments
  * - refactor for readability: order, split into files etc.
  * - many more
  *
  * Note: this isn't optimised for performance and not tested on large input diffgraphs.
  */
class DiffGraphToSchema(domainName: String, schemaPackage: String, targetPackage: String) {

  def build(diffGraph: DiffGraph): String = {
    val nodeTypes = mutable.Set.empty[String]

    diffGraph.iterator().forEachRemaining {
      case node: DetachedNodeGeneric =>
        nodeTypes.addOne(node.label)
        // TODO add node properties, their types etc.
    }

    val nodes = nodeTypes.map { nodeType =>
      val schemaNodeName = camelCase(nodeType)
      s"""val $schemaNodeName = builder.addNodeType(name = "$nodeType")
         |""".stripMargin
    }.mkString(s"$lineSeparator$lineSeparator")

    s"""package $schemaPackage
       |
       |import overflowdb.schema.{Schema, SchemaBuilder}
       |
       |object ${domainName}Schema {
       |  val builder = new SchemaBuilder(
       |      domainShortName = "$domainName",
       |      basePackage = "$targetPackage"
       |  )
       |
       |  $nodes
       |
       |  val instance: Schema = builder.build()
       |}
       |
       |""".stripMargin
  }

  /** convert various raw inputs to somewhat standardized scala names, e.g.
    * CamelCase -> camelCase
    * SNAKE_CASE -> snakeCase
    * This is by no means complete and failsafe.
    **/
  private def camelCase(raw: String): String = {
    if (raw.contains('_')) {
      (raw.split("_").map(_.toLowerCase).toList match {
        case head :: tail => head :: tail.map(_.capitalize) // capitalise all but first element
        case Nil => Nil
      }).mkString
    } else {
      decapitalize(raw)
    }
  }

  /** inversion of StringOps::capitalize - doesn't the name say it all? :) */
  private def decapitalize(s: String): String =
    if (s == null || s.length == 0 || !s.charAt(0).isUpper) s
    else s.updated(0, s.charAt(0).toLower)

}