package overflowdb.schemagenerator

import overflowdb.BatchedUpdate._
import overflowdb.DetachedNodeGeneric

import java.lang.System.lineSeparator
import scala.collection.immutable.{AbstractSeq, LinearSeq}
import scala.collection.mutable

/**
  * Create a base schema definition from a DiffGraph, as e.g. generated by overflowdb.formats.GraphMLImporter
  * This will give you a baseline for creating an overflowdb schema, so you can generate domain types etc.
  *
  * You will need to fill in some gaps later, e.g.
  * - properties: cardinalities: defaults is `optional - you can make it `.mandatory(someDefaultValue)` or `.asList`
  * - properties: reuse across different nodes/edges, comments
  * - edges: cardinalities, comments
  * - nodes: hierarchy: introduce node base types
  * - refactor for readability: order, split into files etc.
  * - many more
  *
  * Note: this isn't optimised for performance and not tested on large input diffgraphs.
  */
class DiffGraphToSchema(domainName: String, schemaPackage: String, targetPackage: String) {

  def build(diffGraph: DiffGraph): String = {
    val nodeTypes = mutable.Map.empty[String, NodeTypeDetails]

    diffGraph.iterator().forEachRemaining {
      case node: DetachedNodeGeneric =>
        val nodeDetails = nodeTypes.getOrElse(node.label, NodeTypeDetails(Set.empty))
        val additionalProperties = node.keyvalues.sliding(2).collect {
          case Array(key: String, value) if !nodeDetails.propertyNames.contains(key) =>
            key
        }
        nodeTypes.addOne(node.label, nodeDetails.copy(propertyNames = nodeDetails.propertyNames ++ additionalProperties))
    }

    val properties = nodeTypes.values.flatMap(_.propertyNames).toSeq.distinct.map { name =>
      val schemaPropertyName = camelCase(name)
      s"""val $schemaPropertyName = builder.addProperty(name = "$name")"""
    }.mkString(s"$lineSeparator$lineSeparator")

    // TODO disambiguate between everything: nodes, properties, edges
    //   val ambiguousNames: Set[String] = {
    //     val alreadySeen = mutable.Set.empty[String]
    //     TODO use Set.newBuilder?
    //     TODO walk nodes and edges ...
    //  }

    val nodes = nodeTypes.map { case (label,  NodeTypeDetails(propertyNames)) =>
      val schemaNodeName = camelCase(label)
      val maybeAddProperties = propertyNames.toSeq.sorted match {
        case seq if seq.isEmpty => ""
        case seq =>
          val properties = seq.mkString(", ")
          s".addProperties($properties)"
      }
      s"""val $schemaNodeName = builder.addNodeType(name = "$label")$maybeAddProperties
         |""".stripMargin
    }.mkString(s"$lineSeparator$lineSeparator")

    s"""package $schemaPackage
       |
       |import overflowdb.schema.{Schema, SchemaBuilder}
       |
       |object ${domainName}Schema {
       |  val builder = new SchemaBuilder(
       |      domainShortName = "$domainName",
       |      basePackage = "$targetPackage"
       |  )
       |
       |  /* <properties start> */
       |  $properties
       |  /* <properties end> */
       |
       |  /* <nodes start> */
       |  $nodes
       |  /* <nodes end> */
       |
       |  val instance: Schema = builder.build()
       |}
       |
       |""".stripMargin
  }

  // TODO add property types
  private case class NodeTypeDetails(propertyNames: Set[String])

  /** convert various raw inputs to somewhat standardized scala names, e.g.
    * CamelCase -> camelCase
    * SNAKE_CASE -> snakeCase
    * This is by no means complete and failsafe.
    **/
  private def camelCase(raw: String): String = {
    if (raw.contains('_')) {
      (raw.split("_").map(_.toLowerCase).toList match {
        case head :: tail => head :: tail.map(_.capitalize) // capitalise all but first element
        case Nil => Nil
      }).mkString
    } else {
      decapitalize(raw)
    }
  }

  /** inversion of StringOps::capitalize - doesn't the name say it all? :) */
  private def decapitalize(s: String): String =
    if (s == null || s.length == 0 || !s.charAt(0).isUpper) s
    else s.updated(0, s.charAt(0).toLower)

}